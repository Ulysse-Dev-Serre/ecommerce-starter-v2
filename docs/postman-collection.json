{
  "info": {
    "name": "API Users - Tests Automatisés",
    "description": "Tests automatisés pour l'API Users avec validation des réponses",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000"
    }
  ],
  "item": [
    {
      "name": "1. GET Users - Test complet",
      "request": {
        "method": "GET",
        "header": [],
        "url": "{{baseUrl}}/api/users"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test automatique du status",
              "pm.test('Status is 200 OK', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test automatique de la structure JSON",
              "pm.test('Response has correct structure', function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json).to.have.property('success', true);",
              "    pm.expect(json).to.have.property('count');",
              "    pm.expect(json).to.have.property('users');",
              "    pm.expect(json).to.have.property('timestamp');",
              "});",
              "",
              "// Test automatique des types de données",
              "pm.test('Data types are correct', function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json.count).to.be.a('number');",
              "    pm.expect(json.users).to.be.an('array');",
              "    pm.expect(json.timestamp).to.be.a('string');",
              "});",
              "",
              "// Test automatique de la structure utilisateur",
              "pm.test('User structure is valid', function () {",
              "    const json = pm.response.json();",
              "    if (json.users.length > 0) {",
              "        const user = json.users[0];",
              "        pm.expect(user).to.have.property('id');",
              "        pm.expect(user).to.have.property('email');",
              "        pm.expect(user).to.have.property('role');",
              "        pm.expect(['CLIENT', 'ADMIN']).to.include(user.role);",
              "    }",
              "});",
              "",
              "// Sauvegarder un ID pour le test suivant",
              "pm.test('Save user ID for next test', function () {",
              "    const json = pm.response.json();",
              "    if (json.users.length > 0) {",
              "        pm.environment.set('testUserId', json.users[0].id);",
              "        pm.environment.set('currentRole', json.users[0].role);",
              "        console.log('Saved user ID:', json.users[0].id);",
              "    }",
              "});",
              "",
              "// Test du temps de réponse",
              "pm.test('Response time is acceptable', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(2000);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "2. POST Promote - Test succès",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": "{{baseUrl}}/api/users/{{testUserId}}/promote"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test automatique du status",
              "pm.test('Promotion successful', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test automatique du changement de rôle",
              "pm.test('Role changed correctly', function () {",
              "    const json = pm.response.json();",
              "    const previousRole = pm.environment.get('currentRole');",
              "    ",
              "    pm.expect(json).to.have.property('success', true);",
              "    pm.expect(json).to.have.property('previousRole', previousRole);",
              "    pm.expect(json.newRole).to.not.equal(previousRole);",
              "    ",
              "    // Vérifier la logique de basculement",
              "    if (previousRole === 'CLIENT') {",
              "        pm.expect(json.newRole).to.equal('ADMIN');",
              "    } else {",
              "        pm.expect(json.newRole).to.equal('CLIENT');",
              "    }",
              "});",
              "",
              "// Test automatique du message",
              "pm.test('Success message is present', function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json.message).to.include('successfully');",
              "});",
              "",
              "// Mettre à jour le rôle pour le test inverse",
              "pm.test('Update role for reverse test', function () {",
              "    const json = pm.response.json();",
              "    pm.environment.set('currentRole', json.newRole);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "3. POST Promote - Test retour",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": "{{baseUrl}}/api/users/{{testUserId}}/promote"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test que le toggle fonctionne dans les deux sens",
              "pm.test('Toggle works both ways', function () {",
              "    pm.response.to.have.status(200);",
              "    ",
              "    const json = pm.response.json();",
              "    const currentRole = pm.environment.get('currentRole');",
              "    ",
              "    pm.expect(json.previousRole).to.equal(currentRole);",
              "    pm.expect(json.newRole).to.not.equal(currentRole);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "4. POST Promote - Test erreur 404",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "url": "{{baseUrl}}/api/users/invalid-id-123/promote"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test automatique d'erreur 404",
              "pm.test('Returns 404 for invalid user', function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              "// Test de la structure d'erreur",
              "pm.test('Error response structure', function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json).to.have.property('success', false);",
              "    pm.expect(json).to.have.property('error');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "5. GET Health - Test diagnostic",
      "request": {
        "method": "GET",
        "header": [],
        "url": "{{baseUrl}}/api/internal/health"
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test automatique du health check",
              "pm.test('Health check passes', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Test de la structure health",
              "pm.test('Health data structure', function () {",
              "    const json = pm.response.json();",
              "    pm.expect(json).to.have.property('success', true);",
              "    pm.expect(json.data).to.have.property('status', 'healthy');",
              "    pm.expect(json.data.database).to.have.property('connected', true);",
              "    pm.expect(json.data.database.userCount).to.be.a('number');",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
