generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  STRIPE
  BANK_TRANSFER
}

enum ShipmentStatus {
  PENDING
  PICKED_UP
  IN_TRANSIT
  DELIVERED
  FAILED
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum AddressType {
  BILLING
  SHIPPING
  BOTH
}

enum Language {
  EN
  FR
  ES
  DE
  IT
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
}

// Modèle User simplifié pour Clerk
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // ID Clerk externe
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  carts     Cart[]
  orders    Order[]
  reviews   Review[]
  auditLogs AuditLog[]

  @@index([clerkId])
  @@index([email])
  @@index([role])
  @@map("users")
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  type      AddressType @default(BOTH)
  isDefault Boolean     @default(false)
  firstName String
  lastName  String
  company   String?
  street    String
  street2   String?
  city      String
  state     String?
  zipCode   String
  country   String      @db.Char(2)
  phone     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type])
  @@index([userId, isDefault])
  @@map("addresses")
}

model Category {
  id        String    @id @default(cuid())
  slug      String    @unique
  parentId  String?   // Catégories hiérarchiques
  sortOrder Int       @default(0)
  isActive  Boolean   @default(true)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  parent       Category?             @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     Category[]            @relation("CategoryHierarchy")
  translations CategoryTranslation[]
  products     ProductCategory[]

  @@index([slug])
  @@index([parentId, sortOrder])
  @@index([isActive, deletedAt])
  @@map("categories")
}

model CategoryTranslation {
  id          String   @id @default(cuid())
  categoryId  String
  language    Language
  name        String
  description String?
  metaTitle   String?
  metaDescription String?

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, language])
  @@index([language])
  @@map("category_translations")
}

model Product {
  id          String        @id @default(cuid())
  slug        String        @unique
  status      ProductStatus @default(DRAFT)
  isFeatured  Boolean       @default(false)
  sortOrder   Int           @default(0)
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  translations ProductTranslation[]
  categories   ProductCategory[]
  variants     ProductVariant[]
  media        ProductMedia[]
  reviews      Review[]
  orderItems   OrderItem[]

  @@index([status, isFeatured])
  @@index([status, deletedAt, createdAt])
  @@index([slug])
  @@index([isFeatured, sortOrder])
  @@map("products")
}

model ProductTranslation {
  id              String   @id @default(cuid())
  productId       String
  language        Language
  name            String
  description     String?
  shortDescription String?
  metaTitle       String?
  metaDescription String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, language])
  @@index([language])
  @@map("product_translations")
}

model ProductCategory {
  productId  String
  categoryId String
  sortOrder  Int @default(0)

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@index([categoryId, sortOrder])
  @@map("product_categories")
}

model ProductVariant {
  id        String    @id @default(cuid())
  productId String
  sku       String    @unique
  barcode   String?
  weight    Decimal?  @db.Decimal(8, 2)
  dimensions Json?    // {length, width, height}
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  product         Product                      @relation(fields: [productId], references: [id], onDelete: Cascade)
  attributeValues ProductVariantAttributeValue[]
  media           ProductMedia[]
  pricing         ProductVariantPricing[]
  inventory       ProductVariantInventory?
  cartItems       CartItem[]
  orderItems      OrderItem[]

  @@index([productId])
  @@index([sku])
  @@map("product_variants")
}

// Table séparée pour la gestion flexible des prix
model ProductVariantPricing {
  id          String   @id @default(cuid())
  variantId   String
  priceType   String   @default("base") // base, sale, wholesale, etc.
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("CAD") @db.Char(3)
  validFrom   DateTime @default(now())
  validUntil  DateTime?
  isActive    Boolean  @default(true)
  
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  
  @@index([variantId, priceType, isActive])
  @@index([validFrom, validUntil])
  @@map("product_variant_pricing")
}

// Table séparée pour l'inventaire
model ProductVariantInventory {
  id              String   @id @default(cuid())
  variantId       String   @unique
  stock           Int      @default(0)
  reservedStock   Int      @default(0)
  lowStockThreshold Int    @default(10)
  trackInventory  Boolean  @default(true)
  allowBackorder  Boolean  @default(false)
  updatedAt       DateTime @updatedAt

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([stock, lowStockThreshold])
  @@map("product_variant_inventory")
}

model ProductAttribute {
  id          String @id @default(cuid())
  key         String @unique // color, size, material
  inputType   String @default("select") // select, text, number, boolean
  isRequired  Boolean @default(false)
  sortOrder   Int    @default(0)

  translations ProductAttributeTranslation[]
  values       ProductAttributeValue[]

  @@index([sortOrder])
  @@map("product_attributes")
}

model ProductAttributeTranslation {
  id          String   @id @default(cuid())
  attributeId String
  language    Language
  name        String   // "Couleur", "Color", etc.

  attribute ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([attributeId, language])
  @@map("product_attribute_translations")
}

model ProductAttributeValue {
  id          String @id @default(cuid())
  attributeId String
  value       String // red, large, cotton

  attribute    ProductAttribute               @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  translations ProductAttributeValueTranslation[]
  variants     ProductVariantAttributeValue[]

  @@unique([attributeId, value])
  @@index([attributeId])
  @@map("product_attribute_values")
}

model ProductAttributeValueTranslation {
  id               String   @id @default(cuid())
  attributeValueId String
  language         Language
  displayName      String   // "Rouge", "Red", etc.

  attributeValue ProductAttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)

  @@unique([attributeValueId, language])
  @@map("product_attribute_value_translations")
}

model ProductVariantAttributeValue {
  variantId        String
  attributeValueId String

  variant        ProductVariant        @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attributeValue ProductAttributeValue @relation(fields: [attributeValueId], references: [id], onDelete: Cascade)

  @@id([variantId, attributeValueId])
  @@map("product_variant_attribute_values")
}

model ProductMedia {
  id        String    @id @default(cuid())
  variantId String?   // Optionnel : peut être lié au produit directement
  productId String?   // Optionnel : média au niveau produit
  url       String
  type      MediaType @default(IMAGE)
  alt       String?
  title     String?
  sortOrder Int       @default(0)
  isPrimary Boolean   @default(false)
  createdAt DateTime  @default(now())

  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  product Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([variantId, sortOrder])
  @@index([productId, sortOrder])
  @@map("product_media")
}

// Cart modifié pour supporter les invités
model Cart {
  id          String     @id @default(cuid())
  userId      String?    // Optionnel pour invités
  anonymousId String?    // Cookie ID pour invités
  status      CartStatus @default(ACTIVE)
  currency    String     @default("CAD") @db.Char(3)
  expiresAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  user  User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@index([userId, status, updatedAt])
  @@index([anonymousId, status, updatedAt])
  @@index([status, expiresAt]) // Pour cleanup des paniers expirés
  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  variantId String
  quantity  Int
  addedAt   DateTime @default(now())

  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([cartId, variantId])
  @@index([cartId])
  @@map("cart_items")
}

model Order {
  id               String      @id @default(cuid())
  orderNumber      String      @unique // Numéro de commande public
  userId           String
  status           OrderStatus @default(PENDING)
  currency         String      @default("CAD") @db.Char(3)
  subtotalAmount   Decimal     @db.Decimal(10, 2)
  taxAmount        Decimal     @db.Decimal(10, 2)
  shippingAmount   Decimal     @db.Decimal(10, 2)
  discountAmount   Decimal     @db.Decimal(10, 2) @default(0)
  totalAmount      Decimal     @db.Decimal(10, 2)
  shippingAddress  Json
  billingAddress   Json
  customerNotes    String?
  internalNotes    String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items        OrderItem[]
  payments     Payment[]
  shipments    Shipment[]
  statusHistory OrderStatusHistory[]

  @@index([userId, status, createdAt])
  @@index([orderNumber])
  @@index([status, createdAt])
  @@map("orders")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  comment   String?
  createdBy String?     // User ID qui a changé le statut
  createdAt DateTime    @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, createdAt])
  @@map("order_status_history")
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  productId       String?
  variantId       String?
  productSnapshot Json    // Snapshot au moment de la commande
  unitPrice       Decimal @db.Decimal(10, 2)
  quantity        Int
  totalPrice      Decimal @db.Decimal(10, 2)
  currency        String  @db.Char(3)

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?        @relation(fields: [productId], references: [id], onDelete: SetNull)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  shipmentItems ShipmentItem[]

  @@index([orderId])
  @@index([variantId])
  @@index([productId])
  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @db.Char(3)
  method          PaymentMethod
  externalId      String?       // Stripe payment_intent_id
  status          PaymentStatus @default(PENDING)
  transactionData Json?
  failureReason   String?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status])
  @@index([externalId])
  @@map("payments")
}

model Shipment {
  id           String         @id @default(cuid())
  orderId      String
  status       ShipmentStatus @default(PENDING)
  trackingCode String?
  carrier      String?
  carrierService String?
  shippedAt    DateTime?
  deliveredAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  order Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  items ShipmentItem[]

  @@index([orderId])
  @@index([status])
  @@index([trackingCode])
  @@map("shipments")
}

model ShipmentItem {
  id          String @id @default(cuid())
  shipmentId  String
  orderItemId String
  quantity    Int

  shipment  Shipment  @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@unique([shipmentId, orderItemId])
  @@map("shipment_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      @db.SmallInt
  title     String?
  comment   String?
  isVerified Boolean @default(false) // Achat vérifié
  isApproved Boolean @default(false) // Modération
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId, isApproved])
  @@index([rating])
  @@map("reviews")
}

// Table pour les événements webhooks (Stripe, etc.)
model WebhookEvent {
  id          String    @id @default(cuid())
  source      String    // stripe, clerk, etc.
  eventId     String    // ID externe de l'événement
  eventType   String    // payment_intent.succeeded, etc.
  processed   Boolean   @default(false)
  processedAt DateTime?
  payloadHash String?   // SHA256 du payload
  retryCount  Int       @default(0)
  maxRetries  Int       @default(3)
  lastError   String?
  createdAt   DateTime  @default(now())

  @@unique([source, eventId])
  @@index([source, eventType, processed])
  @@index([processed, retryCount])
  @@index([createdAt])
  @@map("webhook_events")
}

// Table d'audit pour traçabilité
model AuditLog {
  id        String      @id @default(cuid())
  userId    String?
  userEmail String?
  action    AuditAction
  tableName String
  recordId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([tableName, recordId])
  @@index([userId, createdAt])
  @@index([action, createdAt])
  @@map("audit_logs")
}

// Configuration système
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  description String?
  updatedAt DateTime @updatedAt

  @@index([key])
  @@map("system_settings")
}

// Coupons et promotions
model Coupon {
  id               String    @id @default(cuid())
  code             String    @unique
  type             String    // percentage, fixed_amount
  value            Decimal   @db.Decimal(10, 2)
  currency         String?   @db.Char(3)
  minOrderAmount   Decimal?  @db.Decimal(10, 2)
  maxDiscountAmount Decimal? @db.Decimal(10, 2)
  usageLimit       Int?
  usageCount       Int       @default(0)
  isActive         Boolean   @default(true)
  validFrom        DateTime  @default(now())
  validUntil       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([code, isActive])
  @@index([validFrom, validUntil])
  @@map("coupons")
}
